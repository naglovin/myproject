"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
# SECRET_KEY = 'django-insecure-inzfh980j1#51)jj$w=r&zrbf!7&55tv#n%4k51y)lo7ben^f$'
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

ALLOWED_HOSTS = [
    '10.13.88.78',
    '127.0.0.1',
    'myStoreCreatedByNaglovin.pythonanywhere.com',
]

INTERNAL_IPS = [
    '127.0.0.1',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp',
    'myapp2',
    'myapp3',
    'myapp4',
    'myapp5',
    'myapp6',
    'debug_toolbar',
]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates',
                 ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'myStoreCreatedBy$default',
        'USER': 'myStoreCreatedBy',
        'PASSWORD': os.getenv('MYSQL_PASSWORD'),
        'HOST': 'myStoreCreatedByNaglovin.mysql.pythonanywhere-services.com',
        'OPTIONS': {
            'init_command': "SET NAMES 'utf8mb4';SET sql_mode='STRICT_TRANS_TABLES'",  # режим кодировки и то что мы не хотим терять информацию при сохранении
            'charset': 'utf8mb4',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR/'static/'  # эту статику сервер будет раздовать сам, снижая с нас нагрузку

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose':
            {'format': '{levelname} {asctime} {module} {process} {thread} {message}',
             'style': '{',
             },
            'simple': {
                'format': '%(levelname)s %(message)s'
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'verbose', # добавлен параметр formatter
            },
            'file': {
                'class': 'logging.FileHandler',
                'filename': './log/django.log',
                'formatter': 'verbose',  # добавлен параметр formatter
            },
        },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'myapp': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}
"""Давайте рассмотрим каждый параметр: 
● version: версия формата конфигурации логирования. В настоящее время используется версия 1. 
● disable_existing_loggers: если значение равно True, то все существующие логгеры будут отключены. Если значение равно False, то существующие логгеры будут продолжать работать. 
● handlers: определяет, какие обработчики будут использоваться для записи логов. Обработчики могут быть консольными или файловыми. 
● loggers: определяет, какие логгеры будут использоваться для записи логов. Логгеры могут быть определены для фреймворка Django или для конкретного приложения. 
Для каждого обработчика и логгера можно указать следующие параметры: 
● class: класс, который будет использоваться для записи логов. 
В нашем примере мы используем классы StreamHandler и FileHandler для записи логов в консоль и файл соответственно. 
● filename: путь к файлу, в который будут записываться логи. В нашем примере мы записываем логи в файл /path/to/django.log.   

Внимание! Каталог path/ и вложенный в него каталог to/ необходимо создать самостоятельно. 
Либо исправьте значение на django.log, чтобы создать файл логов в корневой директории проекта. """